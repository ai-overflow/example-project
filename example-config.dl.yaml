##########################################################
# This is an extended example of a config file.          #
# This config file is not related to the actual project. #
##########################################################

# EntryPoint is the first request which will be executed after the form has been posted
entryPoint: "main"
# Project Specific Data
name: "Test Project 123"
description: "Bla Bla Bla Mr. Freeman"
authors:
  - "John Doe"
# Connection contains all connections which can be initialized
connection:
  main:
    port: 3000
    protocol: "HTTP" # HTTPS
    path: "/image/test/{{input.algo}}/"
    method: "GET" # GET, PUT, DELETE
    params:
      bla: "{{input.sliderA}}"
      blubb: "{{input.inputA}}"
    headers:
      Cookie: "SESSION-xyz"
      User-Agent: "Something Special"
    body:
      type: "form-data" # binary(single input: [input: "${input.abc}"]), raw(single input), form-data(multi input)
      input:
        mainImage:
          type: "file"
          value: "{{input.image}}"
          contentType: "auto" # image/jpg, etc.
        testValue:
          type: "text"
          value: "{{input.checkboxA}}"
  imageURL:
    port: 5001
    protocol: "HTTP"
    path: "/image/test/D0/"
    method: POST
    params:
      id: "{{vars.id}}"
    body:
      type: binary
      input: "{{input.image}}"
# Alternative connection:
# connection:
#     import: "postman/AI.postman_collection.json"
#     type: "postman" # (this is undocumented, should be using sth. like openAPI?)
# Input contains all form elements. Can be used as variables for connection or output
# Types:
#  - image (base64 string or raw bytes),
#  - input (string)
#  - slider (number)
#  - textarea (string)
#  - select (string)
#  - multiselect (csv)
#  - checkbox (csv)
#  - radio (string)
input:
  image:
    label: "Image"
    type: "image" # image, input, slider, textarea, select, multiselect, checkbox, radio
    values:
      accepts:
          - "image/jpg"
          - "image/gif"
          - "image/png"
      type: binary # binary, base64
  algo:
    label: "Algorithm"
    type: "select"
    values:
      - "DudeA"
      - "DudeB"
      - "DudeC"
  sliderA:
    label: "Bias"
    type: "slider"
    values:
      min: 0
      max: 100
      stepSize: 0.1
  checkboxA:
    label: "Creator"
    type: "checkbox"
    values:
      - "DudeA"
      - "DudeB"
      - "DudeC"
  inputA:
    label: "Name"
    type: "input"
    values:
      regex: "[A-Za-z0-9]+"
      length:
        min: 100
        max: 5000
# Output TODO: (allow maps / iframe)
output:
  outputA:
    label: "score output"
    type: "list"
    format:
      labelName: "{{cmd.json(connection.main/dense_2[]/name)}}"
      labelValue: "{{cmd.json(connection.main/dense_2[]/certainty)}}"
      representation: "percentageBar" # percentageBar, discretePercentageBar
  outputB:
    label: "score output 2"
    type: "list"
    format:
      labelName: "{{cmd.json(connection.main/dense_3[])}}"
      representation: "text" # percentageBar, discretePercentageBar
  outputC:
    label: "score output 3"
    type: "list"
    repeat:
      iterator: "connection.main/dense_4/value"
      title: "connection.main/dense_4/title"
    format:
      labelName: "{{cmd.iterator([]/name)}}"
      labelValue: "{{cmd.iterator([]/value)}}"
      representation: "discrete" # percentageBar, discretePercentageBar
  outputD:
    label: "score output 4"
    type: "list"
    format:
      labelName: "{{cmd.json(connection.main/polygons[]/label)}}"
      labelValue: "{{cmd.json(connection.main/polygons[]/color)}}"
      representation: "discrete" # percentageBar, discretePercentageBar
      link:
        with: "outputE"
  outputE:
    label: "polygon inc."
    type: "polygon"
    format:
      labelValue: "{{cmd.json(connection.main/polygons[]/coordinates)}}"
      labelName: "{{cmd.json(connection.main/polygons[]/label)}}"
      labelColor: "{{cmd.json(connection.main/polygons[]/color)}}"
      representation: "polygon" # filled, polygon (connected), dots; both: ([{x: 2305, y: 874}, {x: 2574, y: 874}, {x: 2574, y: 1190}, {x: 2305, y: 1190}])
      overlay: "input.image" # must be input or output (output.outputC)
  outputF:
    label: "random image"
    type: "image"
    format:
      type: "url"
      labelName: "{{cmd.json(connection.main/link[0]/label)}}"
      labelValue: "{{cmd.json(connection.main/link[0]/src)}}"
  outputG:
    label: "random image 2"
    type: "image"
    format:
      type: "connection"
      labelName: "{{cmd.json(connection.imageURL/link2[0]/label)}}"
      connection:
        ref: "imageURL"
        vars:
            id: "{{cmd.json(connection.main/link2[0]/src)}}"
  outputH:
    label: "random html"
    type: "html"
    format:
      labelValue: "{{cmd.json(connection.main/html[1])}}"
  outputI:
    label: "random iframe"
    type: "iframe"
    format:
      labelValue: "{{cmd.json(connection.main/iframe[0])}}"
